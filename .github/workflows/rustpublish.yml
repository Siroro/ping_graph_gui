name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build
        run: cargo build --release

      - name: Find Executable
        id: find_executable
        shell: bash
        run: |
          # Find the main executable in the target/release directory (exclude deps, etc.)
          executable=$(find target/release -maxdepth 1 -type f -executable)
          echo "Executable file: $executable"
          echo "::set-output name=exe::$executable"

      - name: Zip the Executable
        run: |
          zip -j executable-${{ matrix.os }}.zip ${{ steps.find_executable.outputs.exe }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: executable-${{ matrix.os }}.zip
          path: executable-${{ matrix.os }}.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Linux binary
        uses: actions/download-artifact@v3
        with:
          name: executable-ubuntu-latest.zip
          path: binaries/

      - name: Download Windows binary
        uses: actions/download-artifact@v3
        with:
          name: executable-windows-latest.zip
          path: binaries/

      - name: Download macOS binary
        uses: actions/download-artifact@v3
        with:
          name: executable-macos-latest.zip
          path: binaries/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            binaries/executable-ubuntu-latest.zip
            binaries/executable-windows-latest.zip
            binaries/executable-macos-latest.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
