name: Auto Tag and Release

permissions:
  contents: write

on:
  push:
    branches: [ main, master ]
    paths:
      - 'Cargo.toml'
      - '.github/workflows/auto-tag.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.version_unix.outputs.version || steps.version_windows.outputs.version }}
      tag: ${{ steps.version_unix.outputs.tag || steps.version_windows.outputs.tag }}
    strategy:
      matrix:
        include:
          # x86_64 platforms
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          # ARM platforms
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for proper versioning
      
      - name: Get version from Cargo.toml (Unix)
        if: runner.os != 'Windows'
        id: version_unix
        run: |
          VERSION=$(grep '^version' Cargo.toml | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Get version from Cargo.toml (Windows)
        if: runner.os == 'Windows'
        id: version_windows
        shell: pwsh
        run: |
          $line = Select-String -Path Cargo.toml -Pattern '^version' | Select-Object -First 1
          if (-not $line) { Write-Error 'version not found in Cargo.toml'; exit 1 }
          $m = [regex]::Match($line.Line, '"([^"]+)"')
          if (-not $m.Success) { Write-Error 'failed to parse version'; exit 1 }
          $version = $m.Groups[1].Value
          Add-Content -Path $Env:GITHUB_OUTPUT -Value "version=$version"
          Add-Content -Path $Env:GITHUB_OUTPUT -Value "tag=v$version"
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build for ${{ matrix.target }}
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Copy artifact (non-Windows)
        if: runner.os != 'Windows'
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/ping_graph release/ping_graph-${{ matrix.target }}

      - name: Copy artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force release | Out-Null
          Copy-Item -Path target\\${{ matrix.target }}\\release\\ping_graph.exe -Destination release\\ping_graph-${{ matrix.target }}.exe -Force
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_unix.outputs.tag || steps.version_windows.outputs.tag }}
          name: Release v${{ steps.version_unix.outputs.version || steps.version_windows.outputs.version }}
          body: Automated release for version ${{ steps.version_unix.outputs.version || steps.version_windows.outputs.version }}
          draft: false
          prerelease: false
          files: |
            release/ping_graph-*
